Script started on 2019-11-11 23:50:01-0500
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ ls
[0m[01;34mDebug[0m            ReversePoemTester.cpp  Stack.h          typescript
[01;34mpoems[0m            ReversePoemTester.h    StackTester.cpp
ReversePoem.cpp  Stack.cpp              StackTester.h
ReversePoem.h    StackException.h       tester.cpp
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ cat Stack.h StackTester.h StackTester.cpp ReverseePoem.h ReversePoem.cpp ReversePoemTester.h ReversePoemTester.cpp tester.cpp
/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin University.
 * Student Name:
 * Date:
 * 
 * Invariant: mySize == 0 && isEmpty() && !isFull()
 *         || mySize == myCapacity && !isEmpty() && isFull()
 *         || mySize > 0 && mySize < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member mySize always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or peekTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
using namespace std;

template<class Item>
class Stack {
public:
	Stack<Item>(unsigned capacity);
	Stack<Item>(const Stack<Item>& original);
	~Stack();
	Stack<Item>& operator=(const Stack<Item>& original);
	bool isEmpty() const { return mySize == 0; }
	bool isFull() const { return mySize == myCapacity; }
	Item peekTop() const;
	void push(const Item& it);
	Item pop();
	unsigned getCapacity() const;
	unsigned getSize() const;
	void setCapacity(unsigned newCapacity);

protected:
	void makeCopyOf(const Stack<Item>& original);

private:
	unsigned myCapacity;
	unsigned mySize;
	Item*    myArray;
	friend class StackTester;
};

/* explicit-value constructor
 * Parameter: capacity, an unsigned value.
 * Precondition: capacity > 0.
 * Postcondition: mySize == 0 && myCapacity == capacity
 *              && myArray contains the address of a dynamic array of 'capacity' entries.
 */
template<class Item>
Stack<Item>::Stack(unsigned capacity) {
	mySize = 0;
	myCapacity = capacity;
	myArray = new Item[capacity];
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
Stack<Item>::Stack(const Stack<Item>& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Precondition: original.myCapacity > 0.
 * Postcondition: I am a copy of original.
 */
template<class Item>
void Stack<Item>::makeCopyOf(const Stack<Item>& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	mySize = original.mySize;
}

/* destructor
 * Postcondition: myCapacity == 0 && mySize == 0
 *             && myArray has been deallocated.
 */
template<class Item>
Stack<Item>::~Stack() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	mySize = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template<class Item>
Stack<Item>& Stack<Item>::operator=(const Stack<Item>& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

template<class Item>
Item Stack<Item>::peekTop() const {
	if ( isEmpty() ) {
		throw StackException("peekTop()", "stack is empty");
	}
	return myArray[mySize-1];
}

template<class Item>
void Stack<Item>::push(const Item& it) {
	if ( isFull() ) {
		throw StackException("push()", "stack is full");
	}
	myArray[mySize++] = it;
}

template<class Item>
Item Stack<Item>::pop() {
	if ( isEmpty() ) {
		throw StackException("pop()", "stack is empty");
	}
	return myArray[--mySize];
}

/* Getter for myCapacity
 * @param:			none
 * Precondition:	none
 * Postcondition:	returns myCapacity
 * AUTHORED BY:		Michael Sisko
 */
template<class Item>
unsigned Stack<Item>::getCapacity() const {
	return myCapacity;
}

/* Getter for mySize
 * @param:			none
 * Precondition:	none
 * Postcondition:	returns mySize
 * AUTHORED BY:		Michael Sisko
 */
template<class Item>
unsigned Stack<Item>::getSize() const {
	return mySize;
}

/* Sets a new myCapacity value
 * @param:			newCapacity, an unsigned
 * Precondition:	contains value of newCapacity
 * Postcondition:	myCapacity now equals newCapacity
 * Postcondition:	myArray has been upsized
 * AUTHORED BY:		Michael Sisko
 */
template<class Item>
void Stack<Item>::setCapacity(unsigned newCapacity) {
	if (myCapacity != newCapacity) {
		if ( newCapacity < myCapacity || newCapacity == 0 ) {
			throw StackException("setCapacity()", "invalid capacity");
		} else {
			Item* newArray;
			newArray = new Item[newCapacity]();
			for ( unsigned i = 0; i < myCapacity; i++) {
				newArray[i] = myArray[i];
			}
			myCapacity = newCapacity;
			delete [] myArray;
			myArray = newArray;
		}
	}
}

#endif









/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin University
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushPeekTopAndIsFull();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testGetCapacity();
	void testGetSize();
	void testSetCapacity();
};

#endif /*STACKTESTER_H_*/









/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin University
 */

#include "StackTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushPeekTopAndIsFull();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testGetCapacity();
	testGetSize();
	testSetCapacity();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	//	try {
	Stack<unsigned> s1(0);
	//		cerr << "\nConstructed stack of size 0\n";
	//		exit(1);
	//	} catch (const StackException& se) {
	//		cout << se << flush;
	//		cout << " 0 " << flush;
	//	}
	// valid parameter
	Stack<unsigned> s2(3);
	cout << " 1 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<unsigned> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<unsigned> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}


void StackTester::testPushPeekTopAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<unsigned> s1(1);
	s1.push(11);
	assert( s1.peekTop() == 11 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<unsigned> s2(3);
	s2.push(11);
	assert( s2.peekTop() == 11 );
	s2.push(22);
	assert( s2.peekTop() == 22 );
	s2.push(33);
	assert( s2.peekTop() == 33 );
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<unsigned> s1(1);
	assert( s1.isEmpty() );
	try {
		s1.peekTop();
		cerr << "\npeekTop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0a " << flush;
	}
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0b " << flush;
	}

	// try empty, capacity > 1
	Stack<unsigned> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1a " << flush;
	}
	try {
		s2.peekTop();
		cerr << "\npeekTop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1b " << flush;
	}

	// try non-empty, capacity 1
	Stack<unsigned> s3(1);
	s3.push(11);
	assert( s3.peekTop() == 11 );
	assert( s3.pop() == 11 );
	cout << " 2 " << flush;
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2a " << flush;
	}
	try {
		s3.peekTop();
		cerr << "\ns3.peekTop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2b " << flush;
	}

	// try non-empty, capacity > 1
	Stack<unsigned> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.peekTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.peekTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.peekTop() == 11 );
	assert( s4.pop() == 11 );
	cout << " 3 " << flush;
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3a " << flush;
	}
	try {
		s4.peekTop();
		cerr << "\ns4.peekTop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3b " << flush;
	}

	cout << " Passed!" << endl;
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<unsigned> s1(1);
	Stack<unsigned> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<unsigned> s3(1);
	s3.push(11);
	Stack<unsigned> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<unsigned> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<unsigned> s6(s5);
	assert( s6.myCapacity == s5.myCapacity );
	assert( s6.mySize == s5.mySize );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.peekTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<unsigned> s1(1);
	Stack<unsigned> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<unsigned> s3(1);
	s3.push(11);
	Stack<unsigned> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<unsigned> s5(1);
	Stack<unsigned> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<unsigned> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<unsigned> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity == s7.myCapacity );
	assert( s8.mySize == s7.mySize );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.peekTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<unsigned> s9(2);
	Stack<unsigned> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<unsigned> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<unsigned> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<unsigned> s13(1);
	Stack<unsigned> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
	// self-assignment, non-minimal size
	s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<unsigned> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<unsigned> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<unsigned> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<unsigned> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testGetCapacity() {
	cout << "- Testing getCapacity()... " << flush;

	// check capacity
	Stack<unsigned> s0(0);
	assert( s0.getCapacity() == 0 );
	cout << " 0 " << flush;

	// check capacity after 1 push
	Stack<unsigned> s1(1);
	s1.push(11);
	assert( s1.getCapacity() == 1 );
	s1.pop();
	cout << " 1 " << flush;

	// check capacity after 2 push
	Stack<unsigned> s2(2);
	s2.push(11);
	s2.push(22);
	assert( s2.getCapacity() == 2 );
	s2.pop();
	s2.pop();
	cout << " 2 " << flush;

	// check capacity after 3 push
	Stack<unsigned> s3(3);
	s3.push(11);
	s3.push(22);
	s3.push(33);
	assert( s3.getCapacity() == 3 );
	s3.pop();
	s3.pop();
	s3.pop();
	cout << " 3 " << flush;

	cout << " Passed! " << endl;
}

void StackTester::testGetSize() {
	cout << "- Testing getSize()... " << flush;

	// check size
	Stack<unsigned> s0(0);
	assert( s0.getSize() == 0 );
	cout << " 0 " << flush;

	// push 1 check size each pop()
	Stack<unsigned> s1(1);
	s1.push(11);
	assert( s1.getSize() == 1 );
	s1.pop();
	assert( s1.getSize() == 0 );
	cout << " 1 " << flush;

	// push 2 check size each pop()
	Stack<unsigned> s2(2);
	s2.push(11);
	s2.push(22);
	assert( s2.getSize() == 2 );
	s2.pop();
	assert( s2.getSize() == 1 );
	s2.pop();
	assert( s2.getSize() == 0 );
	cout << " 2 " << flush;

	// push 3 check size each pop()
	Stack<unsigned> s3(3);
	s3.push(11);
	s3.push(22);
	s3.push(33);
	assert( s3.getSize() == 3 );
	s3.pop();
	assert( s3.getSize() == 2 );
	s3.pop();
	assert( s3.getSize() == 1 );
	s3.pop();
	assert( s3.getSize() == 0 );
	cout << " 3 " << flush;

	cout << " Passed! " << endl;
}

void StackTester::testSetCapacity() {
	cout << "- Testing setCapacity()... " << flush;

	// capacity increase from null
	Stack<unsigned> s0(0);
	assert( s0.getCapacity() == 0 );
	s0.setCapacity(1);
	assert( s0.getCapacity() == 1 );
	cout << " 0 " << flush;

	// capacity increase from non-null
	Stack<unsigned> s2(1);
	assert( s2.getCapacity() == 1 );
	s2.setCapacity(2);
	assert( s2.getCapacity() == 2 );
	cout << " 1 " << flush;

	// capacity no change
	Stack<unsigned> s3(74);
	assert( s3.getCapacity() == 74 );
	s3.setCapacity(74);
	assert( s3.getCapacity() == 74 );
	cout << " 2 " << flush;

	// capacity decrease from non-null
	Stack<unsigned> s4(1);
	try {
		s4.setCapacity(0);
		cerr << "\ns4.setCapacity() invalid capacity worked!";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3 " << flush;
	}

	cout << " Passed! " << endl;
}









/*
 * ReversePoem.h
 *
 *  Created on: Nov 11, 2019
 *      Author: mjs96
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_

#include "Stack.h"
#include <string>
#include <iostream>
#include <fstream>
#include <cassert>
using namespace std;

class ReversePoem {
public:
	ReversePoem(const string& poemFile);
	// Getters return respective strings
	string getTitle() const { return myTitle; }
	string getAuthor() const { return myAuthor; }
	string getBody() const { return myBody; }
	string getBodyReversed() const { return myBodyReversed; }

private:
	// Instance variables initalized to null
	string myTitle = "";
	string myAuthor = "";
	string myBody = "";
	string myBodyReversed = "";
	friend class ReversePoemTester;
};

#endif /* REVERSEPOEM_H_ */









/*
 * ReversePoem.cpp
 *
 *  Created on: Nov 11, 2019
 *      Author: mjs96
 */

#include "ReversePoem.h"

/* Reverse Poem Constructor
 * @param:			poemFile, a string
 * Precondition:	contains file name
 * Postcondition:	myTitle no longer holds ""
 * Postcondition:	myAuthor no longer holds ""
 * Postcondition:	myBody no longer holds ""
 * Postcondition:	myBodyReversed no longer holds ""
 * AUTHORED BY:		Michael Sisko
 */
ReversePoem::ReversePoem(const string& poemFile) {
	ifstream fin( poemFile.c_str() );
	assert( fin.is_open() );

	getline(fin,myTitle);
	getline(fin,myAuthor);
	string blankLine;
	getline(fin,blankLine);

	Stack<string> p0(1);
	string currLine;
	while ( fin.good() ) {
		getline(fin,currLine);
		p0.push(currLine);
		myBody = myBody + currLine + '\n';
		if ( p0.isFull() ) {
			p0.setCapacity( p0.getCapacity()*2 );
		}
	}
	fin.close();

	while ( !p0.isEmpty() ) {
		myBodyReversed = myBodyReversed + p0.pop() + '\n';
	}
}









/*
 * ReversePoem.h
 *
 *  Created on: Nov 11, 2019
 *      Author: mjs96
 */
#include "Stack.h"
#ifndef REVERSEPOEMTESTER_H_
#define REVERSEPOEMTESTER_H_

class ReversePoemTester {
public:
	void runTests();
	void testConstructor();
	void testGetTitle();
	void testGetAuthor();
	void testGetBody();
	void testGetBodyReversed();
};

#endif /* REVERSEPOEMTESTER_H_ */









/*
 * ReversePoemTester.cpp
 *
 *  Created on: Nov 11, 2019
 *      Author: mjs96
 */

#include "ReversePoem.h"
#include "ReversePoemTester.h"

void ReversePoemTester::runTests() {
	cout << "\nTesting ReversePoem class..." << endl;
	testConstructor();
	testGetTitle();
	testGetAuthor();
	testGetBody();
	testGetBodyReversed();
	cout << "All tests passed!" << endl;
}

void ReversePoemTester::testConstructor() {
	cout << "- Testing constructor... " << flush;

	// valid filename
	ReversePoem rp0("poems/poemTest0.txt");
	cout << " 0 " << flush;

	// valid filename
	ReversePoem rp1("poems/poemTest1.txt");
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetTitle() {
	cout << "- Testing getTitle()... " << flush;

	// checks title
	ReversePoem rp0("poems/poemTest0.txt");
	assert( rp0.getTitle() == "testTitle T1" );
	cout << " 0 " << flush;

	// checks title
	ReversePoem rp1("poems/poemTest1.txt");
	assert( rp1.getTitle() == "testTitle T2" );
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetAuthor() {
	cout << "- Testing getAuthor()... " << flush;

	// checks author
	ReversePoem rp0("poems/poemTest0.txt");
	assert( rp0.getAuthor() == "testAuthor A1" );
	cout << " 0 " << flush;

	// checks author
	ReversePoem rp1("poems/poemTest1.txt");
	assert( rp1.getAuthor() == "testAuthor A2" );
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetBody() {
	cout << "- Testing getBody()... " << flush;

	// checks body
	ReversePoem rp0("poems/poemTest0.txt");
	assert( rp0.getBody() == "L1: AAA\nL2: BBB\nL3: CCC\n" );
	cout << " 0 " << flush;

	// checks body
	ReversePoem rp1("poems/poemTest1.txt");
	assert( rp1.getBody() == "L1: DDD\nL2: EEE\nL3: FFF\nL4: GGG\nL5: HHH\n" );
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetBodyReversed() {
	cout << "- Testing getBodyReversed()... " << flush;

	// checks body reversed
	ReversePoem rp0("poems/poemTest0.txt");
	assert( rp0.getBodyReversed() == "L3: CCC\nL2: BBB\nL1: AAA\n" );
	cout << " 0 " << flush;

	// checks body reversed
	ReversePoem rp1("poems/poemTest1.txt");
	assert( rp1.getBodyReversed() == "L5: HHH\nL4: GGG\nL3: FFF\nL2: EEE\nL1: DDD\n" );
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}









/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin University.
 */

#include "StackTester.h"
#include "ReversePoemTester.h"
#include "ReversePoem.h"

#include <iostream>
using namespace std;

int main() {
	StackTester st;
	st.runTests();
	ReversePoemTester rpt;
	rpt.runTests();

	cout << "\nEnter the name of the poem file: ";
	string poemFile;
	cin >> poemFile;

	ReversePoem reversePoem(poemFile);
	cout << '\n' << reversePoem.getTitle() << "\n"
			<< reversePoem.getAuthor() << "\n"
			<< "\n*** Top-To-Bottom ***\n\n"
			<< reversePoem.getBody()
			<< "\n*** Bottom-To-Top ***\n\n"
			<< reversePoem.getBodyReversed()
			<< flush;
}









]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ [Kcd Debug
]0;mjs96@gold12: ~/cs112/project07/Debug[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/Debug[00m$ ls
makefile    ReversePoem.d        ReversePoemTester.o  Stack.o        subdir.mk
objects.mk  ReversePoem.o        sources.mk           StackTester.d  tester.d
[0m[01;32mproject07[0m   ReversePoemTester.d  Stack.d              StackTester.o  tester.o
]0;mjs96@gold12: ~/cs112/project07/Debug[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/Debug[00m$ make all
make: Nothing to be done for 'all'.
]0;mjs96@gold12: ~/cs112/project07/Debug[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/Debug[00m$ cd .
]0;mjs96@gold12: ~/cs112/project07/Debug[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/Debug[00m$ cd ..
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ ./de  Debug/project07 
Testing Stack class...
- Testing constructor...  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getCapacity()...  0  1  2  3  Passed! 
- Testing getSize()...  0  1  2  3  Passed! 
- Testing setCapacity()...  0  1  2  3  Passed! 
All tests passed!

Testing ReversePoem class...
- Testing constructor...  0  1  Passed!
- Testing getTitle()...  0  1  Passed!
- Testing getAuthor()...  0  1  Passed!
- Testing getBody()...  0  1  Passed!
- Testing getBodyReversed()...  0  1  Passed!
All tests passed!

Enter the name of the poem file: poems/poemTest0.txt

testTitle T1
testAuthor A1

*** Top-To-Bottom ***

L1: AAA
L2: BBB
L3: CCC

*** Bottom-To-Top ***

L3: CCC
L2: BBB
L1: AAA
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ ./Debug/project07 
Testing Stack class...
- Testing constructor...  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getCapacity()...  0  1  2  3  Passed! 
- Testing getSize()...  0  1  2  3  Passed! 
- Testing setCapacity()...  0  1  2  3  Passed! 
All tests passed!

Testing ReversePoem class...
- Testing constructor...  0  1  Passed!
- Testing getTitle()...  0  1  Passed!
- Testing getAuthor()...  0  1  Passed!
- Testing getBody()...  0  1  Passed!
- Testing getBodyReversed()...  0  1  Passed!
All tests passed!

Enter the name of the poem file: poems/poem0 Test1.txt

testTitle T2
testAuthor A2

*** Top-To-Bottom ***

L1: DDD
L2: EEE
L3: FFF
L4: GGG
L5: HHH

*** Bottom-To-Top ***

L5: HHH
L4: GGG
L3: FFF
L2: EEE
L1: DDD
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ ./Debug/project07 
Testing Stack class...
- Testing constructor...  1  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getCapacity()...  0  1  2  3  Passed! 
- Testing getSize()...  0  1  2  3  Passed! 
- Testing setCapacity()...  0  1  2  3  Passed! 
All tests passed!

Testing ReversePoem class...
- Testing constructor...  0  1  Passed!
- Testing getTitle()...  0  1  Passed!
- Testing getAuthor()...  0  1  Passed!
- Testing getBody()...  0  1  Passed!
- Testing getBodyReversed()...  0  1  Passed!
All tests passed!

Enter the name of the poem file: poems/love.txt

Love?
Anonymous

*** Top-To-Bottom ***

I don't love you anymore...
I would be lying if I said
That I still love you the way I always did.
I'm sure
Nothing was in vain.
And I feel inside of me that
You mean nothing to me
I could never really say that
Our time together matters.
I feel more and more that
I'm forgetting you...
And I will never use the phrase
I love you.
I'm sorry but I must tell the truth.

*** Bottom-To-Top ***

I'm sorry but I must tell the truth.
I love you.
And I will never use the phrase
I'm forgetting you...
I feel more and more that
Our time together matters.
I could never really say that
You mean nothing to me
And I feel inside of me that
Nothing was in vain.
I'm sure
That I still love you the way I always did.
I would be lying if I said
I don't love you anymore...
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ cat     
]0;mjs96@gold12: ~/cs112/project07[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07[00m$ cd poems/ 
]0;mjs96@gold12: ~/cs112/project07/poems[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/poems[00m$ ls
love.txt  poemTest0.txt  poemTest1.txt
]0;mjs96@gold12: ~/cs112/project07/poems[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/poems[00m$ cat poemTest0.txt poem     
testTitle T1
testAuthor A1

L1: AAA
L2: BBB
L3: CCC]0;mjs96@gold12: ~/cs112/project07/poems[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/poems[00m$ cat poemTest0.txt[1P[1@1.txt
testTitle T2
testAuthor A2

L1: DDD
L2: EEE
L3: FFF
L4: GGG
L5: HHH]0;mjs96@gold12: ~/cs112/project07/poems[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/poems[00m$ cat poemTest1.txt             love.txt
Love?
Anonymous

I don't love you anymore...
I would be lying if I said
That I still love you the way I always did.
I'm sure
Nothing was in vain.
And I feel inside of me that
You mean nothing to me
I could never really say that
Our time together matters.
I feel more and more that
I'm forgetting you...
And I will never use the phrase
I love you.
I'm sorry but I must tell the truth.]0;mjs96@gold12: ~/cs112/project07/poems[01;32mmjs96@gold12[00m:[01;34m~/cs112/project07/poems[00m$ exit

Script done on 2019-11-11 23:54:19-0500
