Script started on 2019-10-14 22:58:51-0400
]0;mjs96@gold15: ~/cs112/project05[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05[00m$ ls
[0m[01;34mDebug[0m     List.h             ListTest1.txt   ListTester.h   tester.cpp
List.cpp  ListTest1Copy.txt  ListTester.cpp  OutStream.txt  typescript
]0;mjs96@gold15: ~/cs112/project05[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05[00m$ cat List.h ListTester.h ListTester.cpp List.cpp ttester.cpp ListTest1.txt ListTest1Copy.txt OutStream.txt 
/*
 * List.h
 *
 *  Created on: Oct 8, 2019
 *      Authors: Alec Twining & Michael Sisko
 *      Alec did parts operator==, readfrom(istream), writeTo(string),
 *      // prepend(item), insert(Item, index) and wrote for the tests for them.
 *      Michael did operator!=,writeTo(ostream),readFrom(string),getIndexOf(Item), and remove(index
 *      // and wrote the test for them
 *
 */

#ifndef LIST_H_
#define LIST_H_


#include<iostream>
#include <cassert>
#include <fstream>
#include <cstring>
using namespace std;

template <class Item>

class List {
public:
	List();
	friend class ListTester;
	unsigned getSize() const ;
	Item getFirst() const ;
	Item getLast() const ;
	void append(const Item& it) ;
	List(const List& original) ;
	List& operator=(const List& original);
	~List() ;
	bool operator==(const List& original);
	void writeTo(string fileName) const;
	void readFrom(istream& in) ;
	void prepend(const Item& it) ;
	void insert(const Item it, unsigned index);
	//
	void writeTo( ostream& out ) ;
	void readFrom( const string& fileName );
	int getIndexOf( const Item& it );
	Item remove( unsigned index );
	bool operator!=(const List& l2) const ;


private:
	struct Node {
		Item myItem;
		Node* myNext;
		Node();
		Node(Item item, Node* nextNode);
		~Node();

	};
	unsigned mySize;
	Node* myFirst;
	Node* myLast;

	void makeCopyOf(const List &original);
	void makeCopyof(const List &original);
};

template <class Item>
List<Item>::List() {
	myFirst = NULL;
	myLast = NULL;
	mySize = 0;
	// TODO Auto-generated constructor stub

}
//initializes the node
template <class Item>
List<Item>::Node::Node() {
	myItem = Item();
	myNext = NULL;
}
//sets them eqaul to a variable
template <class Item>
List<Item>::Node::Node(Item item, Node* nextNode) {
	myItem = item;
	myNext = nextNode;
}
//rerurns teh size of the list
template <class Item>
unsigned List<Item>::getSize() const {
	return mySize;
}
//returns first value in the list
template <class Item>
Item List<Item>::getFirst() const {
	if(mySize < 0 || myFirst == NULL) {
		throw underflow_error("Warning: The list is empty");
	}else{
		return myFirst->myItem;
	}
}
//returns the last value in the list
template <class Item>
Item List<Item>::getLast() const {
	if(mySize < 0 || myFirst == NULL) {
		throw underflow_error("Warning: The list is empty");
	}else{
		return myLast->myItem;
	}

}
// adds value to list
template <class Item>
void List<Item>::append(const Item& it) {
	Node * nodePtr = new List::Node(it, NULL);
	if (mySize == 0) {
		myFirst = nodePtr;
	}else{
		myLast->myNext = nodePtr;
	}
	myLast = nodePtr;
	mySize += 1;
}
//extracted function
template <class Item>
void List<Item>::makeCopyof(const List &original) {
	myFirst = myLast = NULL; //  set pointers
	mySize = 0; //   and size to 'empty' values
	if (original.getSize() > 0) {
		Node *oPtr = original.myFirst; //  start at the first node
		while (oPtr != NULL) { //  while there are nodes to copy:
			append(oPtr->myItem); //   append the item in that node
			oPtr = oPtr->myNext;  //   advance to next node

		}
	}
}
//list destructor
template <class Item>
List<Item>::~List() {
	delete myFirst;          // delete first node, invoking ~Node() (does nothing if myFirst == NULL)
	myFirst = myLast = NULL; // clear myFirst and myLast (optional)
	mySize = 0;              // clear mySize (optional)
}
//node desructor
template <class Item>
List<Item>::Node::~Node() {
	//	cout << "~Node() is deallocating the node containing item "
	//			<< myItem << endl;
	delete myNext;       // delete the next node, invoking ~Node() in it
	// (does nothing if myNext == NULL)
}
//performs makeCopyof constructor
template <class Item>
List<Item>::List(const List& original) {
	makeCopyof(original);
}

//deallocates chain nodes and perfoms makeCopyof
template <class Item>
List<Item>& List<Item>::operator=(const List& original) {
	if (&myFirst != &original.myFirst) {
		delete myFirst;
		makeCopyof(original);
	}
	return *this;

}
//checks equality
template <class Item>
bool List<Item>::operator==(const List& original) {
	if (mySize == original.mySize) {
		if (mySize == 0) {
			return true;
		}
		Node *myPtr = original.myFirst;
		Node *myPtr2 = myFirst;

		while (myPtr != NULL) {
			if (myPtr2 -> myItem != myPtr -> myItem) {
				return false;
			}
			else {
				return true;
			}
			myPtr = myPtr -> myNext;
			myPtr2 = myPtr2 -> myNext;
		}
	}

	if (mySize != original.mySize) {
		return false;
	}

	return true;
}
//checks file is open and then writes to it
template <class Item>
void List<Item>::writeTo(string fileName) const {
	ofstream fout(fileName.c_str());
	assert(fout.is_open());
	Node* myPtr = myFirst;
	while(myPtr) {
		fout << myPtr->myItem << '\t';
		myPtr = myPtr->myNext;
	}
}

template <class Item>
void List<Item>::readFrom(istream& in) {
	Item it;
	while (in) { //while in !=0
		in >> it;
		append(it);
	}
}
//adds node in beginning
template <class Item>
void List<Item>::prepend(const Item& it) {
	if (mySize == 0) {
		Node *myPtr;
		myPtr = new Node(it, NULL);
		myFirst = myLast = myPtr;
	} else {
		Node *myPtr;
		myPtr = new Node(it, myFirst);
		myFirst = myPtr;
	}

	mySize++;
}

//inserts node at any point
template <class Item>
void List<Item>::insert(const Item it, unsigned index) {
	Node *nodePtr2 = myFirst;

	if(mySize == 0||index == 0) {
		prepend(it);
	}
	else{
		for(unsigned i = 0; i <index-1; i++){
			nodePtr2 = nodePtr2->myNext;
		}
		nodePtr2->myNext = new Node(it,nodePtr2->myNext);
		if (index >= mySize) {
			myLast = new Node(it,NULL);
		}
		mySize++;
	}
}


// Michael Sisko, List Functions:

/* Overload Inequality operator
 * @param:			l2, a List template
 * Precondition:	Checks if dimensions of Node Items match
 * Postcondition:	Otherwise returns that Node Items in do not match
 * AUTHORED BY:		Michael Sisko
 */
template <class Item>
bool List<Item>::operator!=(const List& l2) const {
	if ( mySize == l2.getSize() ) {
		Node* myNode = myFirst;
		Node* l2Node = l2.myFirst;
		while ( myNode != nullptr) {
			if ( myNode->myItem != l2Node->myItem ) {
				return true;
			}
			myNode = myNode->myNext;
			l2Node = l2Node->myNext;
		}
		return false;
	} else {
		return true;
	}
}

/* Write to console
 * @param:			out, an ostream
 * Precondition:	stream contains values in list
 * Postcondition:	values printed to screen
 * AUTHORED BY:		Michael Sisko
 */
template <class Item>
void List<Item>::writeTo( ostream& out ) {
	Node* myNode = myFirst;
	for ( unsigned i = 0; i < mySize; i++ ) {
		out << myNode->myItem << '\n';
		myNode = myNode->myNext;
	}
}

/* Index Function
 * @param:			it, an Item
 * Precondition:	it contains a value within a Node
 * Postcondition:	function returns position in list
 * Postcondition:	function returns -1 if list empty
 * AUTHORED BY:		Michael Sisko
 */
template <class Item>
int List<Item>::getIndexOf( const Item& it ) {
	Node* myNode = myFirst;
	int index = 0;
	if ( mySize > 0 ) {
		while ( it != myNode->myItem ) {
			if ( myNode == nullptr ) {
				throw range_error( "Cannot get index for empty list.");
			} else {
				myNode = myNode->myNext;
				index++;
			}
		}
		return index;
	} else {
		return -1;
	}
}

/* Node Remove Function
 * @param:			index, an unsigned
 * Precondition:	index contains position of Node to be removed
 * Postcondition:	Node at index is removed
 * AUTHORED BY:		Michael Sisko
 */
template <class Item>
Item List<Item>::remove( unsigned index ) {
	Node* myNode = myFirst;
	for ( unsigned i = 0; i <= index; i++ ) {
		if ( i+1 == index ) {
			Node* temp = myNode->myNext->myNext;
			myNode->myNext = nullptr;
			delete myNode->myNext;
			myNode->myNext = temp;
			mySize--;
			break;
		} else if (index == 0) {
			Node* temp = myFirst->myNext;
			myFirst->myNext = nullptr;
			delete myFirst;
			myFirst = temp;
			mySize--;
			break;
		} else {
			myNode = myNode->myNext;
		}
	}
	return myNode->myItem;
}

/* Reads from fileName
 * @param:			fileName, a string
 * Precondition:	fileName contains a file name to be read
 * Postcondition:	values are incorporated into List
 * AUTHORED BY:		Michael Sisko
 */
template <class Item>
void List<Item>::readFrom( const string& fileName ) {
	ifstream fin( fileName.c_str() );
	assert( fin.is_open() );

	Item it;
	while( mySize < 4 ) {
		fin >> it;
		append(it);
	}
	fin.close();
}

#endif /* LIST_H_ */







/* ListTester.h declares the test-class for class List.
 * Joel Adams, for CS 112 at Calvin University.
 * Students: Alec Twining and Michael Sisko
 */

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

class ListTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testWriteToString();
	void testReadFromStream() const ;
	void testPrepend() ;
	void testInsertion();
	void testWriteToStream();
	void testInequality() const;
	void testReadFromString();
	void testGetIndexOf();
	void testRemove();

};

#endif /*LISTTESTER_H_*/






/* ListTester.cpp defines the test methods for class List.
 * Joel Adams, for CS 112 at Calvin University.
 * Alec Twining and Michael Sisko
 */


#include "ListTester.h" // ListTester
#include "List.h"       // List
#include <iostream>   // cin, cout
#include <fstream>
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
using namespace std;

void ListTester::runTests() {
	cout << "Running List tests..." << endl;
	testDefaultConstructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAppend();
	testDestructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testReadFromStream();
	testPrepend();
	testWriteToString();
	testInsertion();
	testInequality();
	testWriteToStream();
	testReadFromString();
	testGetIndexOf();
	testRemove();


	cout << "All tests passed!" << endl;
}

void ListTester::testDefaultConstructor() {
	cout << "Testing List default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == 0 );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	// check that nodes are distinct
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myFirst->myNext != list3.myFirst->myNext );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
	// check that nodes are distinct
	assert( list5.myFirst != list3.myFirst );
	assert( list5.myFirst->myNext != list3.myFirst->myNext );
	assert( list5.myLast != list3.myLast );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
	// check that nodes are distinct
	assert( list8.myFirst != list3.myFirst );
	assert( list8.myFirst->myNext != list3.myFirst->myNext );
	assert( list8.myLast != list3.myLast );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testEquality() {
	cout << "Testing Equality... " << flush;
	List<double> list1;
	list1.append(1);
	list1.append(2);
	list1.append(3);
	List<double> list2;
	list2.append(1);
	list2.append(2);
	list2.append(3);
	List<double> list3;
	List<double> list4;
	list4.append(1);
	list4.append(4);
	list4.append(2);

	// asserting list1 and list 2 are equal
	assert( list1 == list2 );
	cout << " 0 " << flush;

	// non-empty to empty equality
	assert( !(list1==list3) );
	cout << " 1 " << flush;

	// testing two lists with same size but different values
	assert(list1.getSize() == list4.getSize());
	assert( !(list1.myFirst->myNext == list4.myFirst->myNext) );
	assert( !(list1.myLast == list4.myLast));
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}
void ListTester::testReadFromStream() const {
	cout << "Testing readFrom(istream)..." << flush;

	ifstream fin("OutStream.txt");
	assert (fin.is_open());
	List<double> alist;
	alist.readFrom(fin);
	assert(alist.myFirst->myItem == 1);
	assert(alist.myFirst->myNext->myItem == 2);
	assert(alist.myFirst->myNext->myNext->myItem == 3);
	fin.close();
	cout <<"Passed!" << endl;
}

void ListTester::testPrepend() {
	cout << "Testing prepend()... ";
	List<double> list1;
	list1.append(11);
	list1.append(22);
	list1.append(33);


	list1.prepend(-1);
	assert(list1.getSize() == 4);
	assert(list1.myFirst->myItem == -1);
	assert(list1.myFirst->myNext->myItem = 11);
	assert(list1.myFirst->myNext->myNext->myItem = 22);
	assert(list1.myFirst->myNext->myNext->myNext->myItem = 33);
	assert(list1.myLast->myItem == 33);
	cout << " 0 " << flush;

	List<double> list2;
	list2.prepend(5);
	assert(list2.myFirst->myItem ==5);
	assert(list2.myLast->myItem ==5);
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testInsertion() {
	cout << "Testing insertion()..." << flush;

	List<double> list1;
	list1.append(-1);
	list1.append(11);
	list1.append(22);
	list1.append(33);

	List<double> list2;

	List<double> list3;
	list3 = list1;

	list2.insert(0, 0);
	assert(list2.getIndexOf(0) == 0);
	assert(list2.myFirst->myItem == 0);
	assert(list2.myLast->myItem == 0);

	cout << " 0 " << flush;

	list1.insert(0, 0);
	assert(list1.getIndexOf(0) == 0);
	assert(list1.myFirst -> myItem == 0);
	assert(list1.myFirst->myNext->myItem == -1);
	assert(list1.myFirst->myNext->myNext-> myItem == 11);
	assert(list1.myFirst->myNext->myNext->myNext->myItem == 22);
	assert(list1.myLast->myItem == 33);

	cout << " 1 " << flush;

	list3.insert(0, 1);
	//	assert(list3.getIndexOf(1) == 0);
	assert(list3.getSize() == 5);
	assert(list3.myFirst->myItem == -1);
	assert(list3.myFirst->myNext->myItem == 0);
	assert(list3.myFirst->myNext->myNext->myItem == 11);
	assert(list3.myFirst->myNext->myNext->myNext->myItem == 22);
	assert(list3.myLast->myItem == 33);

	cout << " 2 " << flush;

	list1.insert(1, 5);
	assert(list1.myLast -> myItem == 1);
	assert( list1.getIndexOf(1) == 5);

	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testWriteToString() {
	cout << "Testing writeTo(string)..." << flush;

	List<double> list1;
	list1.append(1);
	list1.append(2);
	list1.append(3);

	ofstream fout("OutStream.txt");
	assert(fout.is_open());
	list1.writeTo(fout);
	fout.close();

	ifstream fin("OutStream.txt");
	assert(fin.is_open());
	double number;
	for (unsigned i = 0; i < 3; ++i) {
		fin >>number;
		assert(number == i+1);
	}
	cout <<"Passed! but check OutStream.txt for the values ..." << endl;
}

//Michael Sisko's Tests (mjs96)
void ListTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	List<double> l0;
	List<double> l1;
	assert( !(l0 != l1) );
	cout << " 0 " << flush;

	// empty vs nonempty
	l1.append(1);
	assert( l0 != l1 );
	cout << " 1 " << flush;

	// equal sized, same values
	l0.append(1);
	assert( !(l0 != l1) );
	cout << " 2 " << flush;

	// equal sized, different values
	l0.myFirst->myItem = 11;
	l1.myFirst->myItem = 22;
	assert( l0 != l1 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testWriteToStream() {
	cout << "Testing writeToStream... " << flush;

	List<double> l0;
	ifstream fin("ListTest1.txt");
	assert( fin.is_open() );
	l0.readFrom(fin);
	fin.close();

	cout << " 0 " << flush;

	ofstream fout("ListTest1Copy.txt");
	assert( fout.is_open() );
	l0.writeTo(fout);
	fout.close();

	cout << " 1 " << flush;

	List<double> l1;
	l1.readFrom("ListTest1Copy.txt");

	cout << " 2 " << flush;

	assert( l1.mySize == 4 );
	assert( l1.myFirst->myItem == 0 );
	assert( l1.myFirst->myNext->myItem == 1 );
	assert( l1.myFirst->myNext->myNext->myItem == 2 );
	assert( l1.myFirst->myNext->myNext->myNext->myItem == 3 );
	assert( l1.myLast->myItem == 3 );

	cout << " 3 " << flush;

	cout << "Passed! " << endl;
}

void ListTester::testReadFromString() {
	cout << "Testing readFromString... " << flush;
	List<double> aList;
	aList.readFrom("ListTest1.txt");

	assert( aList.mySize == 4 );
	assert( aList.myFirst->myItem == 0 );
	assert( aList.myFirst->myNext->myItem == 1 );
	assert( aList.myFirst->myNext->myNext->myItem == 2 );
	assert( aList.myFirst->myNext->myNext->myNext->myItem == 3 );
	assert( aList.myLast->myItem == 3 );

	cout << "Passed! " << endl;
}

void ListTester::testGetIndexOf() {
	cout << "Testing GetIndexOf... " << flush;

	// test empty
	List<double> l0;
	l0.getIndexOf(0);
	assert( l0.getIndexOf(0) == -1 );
	cout << " 1 " << flush;

	// test non-empty
	for ( unsigned i = 1; i < 4; i++ ) {
		l0.append( i * 11 );
	}
	assert( l0.getIndexOf(11) == 0 );
	assert( l0.getIndexOf(22) == 1 );
	assert( l0.getIndexOf(33) == 2 );
	cout << " 2 " << flush;

	cout << "Passed! " << endl;
}

void ListTester::testRemove() {
	cout << "Testing Remove... " << flush;
	List<double> l0;
	l0.append(11);
	l0.append(22);
	l0.append(33);
	l0.append(44);
	assert( l0.mySize == 4 );
	cout << " 0 " << flush;

	// remove item from middle of list
	l0.remove(1);
	assert( l0.mySize == 3 );
	assert( l0.myFirst->myItem == 11 );
	assert( l0.myFirst->myNext->myItem == 33 );
	assert( l0.myFirst->myNext->myNext->myItem == 44 );
	cout << " 1 " << flush;

	// remove last item from list
	l0.remove(2);
	assert( l0.mySize == 2 );
	assert( l0.myFirst->myItem == 11 );
	assert( l0.myFirst->myNext->myItem == 33 );
	assert( l0.myFirst->myNext->myNext == nullptr );
	cout << " 2 " << flush;

	// remove first item from list
	l0.remove(0);
	assert( l0.mySize == 1 );
	assert( l0.myFirst->myItem == 33 );
	assert( l0.myFirst->myNext == nullptr );
	cout << " 3 " << flush;

	//remove only list item
	l0.remove(0);
	assert( l0.mySize == 0 );
	assert( l0.myFirst == nullptr );
	cout << " 4 " << flush;

	cout << "Passed! " << endl;
}







///*
// * List.cpp
// *
// *  Created on: Oct 8, 2019
// *      Author: mjs96
// */
//
//#include "List.h"
//#include <stdexcept>
//using namespace std;
//
//List::List() {
//	myFirst = myLast = nullptr;
//	mySize = 0;
//}
//
//List::Node::Node() {
//	myItem = Item();
//	myNext = nullptr;
//}
//
//List::Node::Node(Item it, Node* next) {
//	myItem = it;
//	myNext = next;
//}
//
//void List::getSize(unsigned mySize) const {
//}
//
//Item List::getFirst() {
//	if (mySize == 0 || myFirst == nullptr) {
//		throw underflow_error("Error, List size is 0 or myFirst = nullptr");
//	} else {
//		return myFirst->myItem;
//	}
//}
//
//Item List::getLast() {
//	if (mySize == 0 || myLast == nullptr) {
//		throw underflow_error("Error, List size is 0 or myLast = nullptr");
//	} else {
//		return myLast->myItem;
//	}
//}
//
//void List::append(const Item& it) {
//	Node* newNode = new Node( it, nullptr );
//	if ( mySize == 0 ) {
//		myFirst = newNode;
//	} else {
//		myLast->myNext = newNode;
//	}
//	myLast = newNode;
//	mySize++;
//}
//
//List::~List() {
//	delete myFirst;          // delete first node, invoking ~Node() (does nothing if myFirst == nullptr)
//	myFirst = myLast = nullptr; // clear myFirst and myLast (optional)
//	mySize = 0;              // clear mySize (optional)
//}
//
//List::List(const List& original) {
//	myFirst = myLast = nullptr;		//  set pointers
//	mySize = 0;						//   and size to 'empty' values
//	Node* oPtr = original.myFirst;	//  start at the first node
//	while (oPtr != nullptr) {			//  while there are nodes to copy:
//		append(oPtr->myItem);		//   append the item in that node
//		oPtr = oPtr->myNext;		//   advance to next node
//	}
//}
//
//List& List::operator=(const List& original) {
//	if (&original != this) {
//		delete myFirst;
//		myFirst = myLast = nullptr;
//		mySize = 0;
//		Node* nPtr = original.myFirst;
//		while (nPtr != nullptr) {
//			append(nPtr->myItem);
//			nPtr = nPtr->myNext;
//		}
//	}
//	return *this;
//}
//
//bool List::operator!=(const List& l2) const {
//	if ( mySize == l2.getSize() ) {
//		Node* myNode = myFirst;
//		Node* l2Node = l2.myFirst;
//		while ( myNode != nullptr) {
//			if ( myNode->myItem != l2Node->myItem ) {
//				return true;
//			}
//			myNode = myNode->myNext;
//			l2Node = l2Node->myNext;
//		}
//		return false;
//	} else {
//		return true;
//	}
//}
//
//void List::writeTo( ostream& out ) {
//	Node* myNode = myFirst;
//	for ( unsigned i = 0; i < mySize; i++ ) {
//		out << myNode->myItem << '\n';
//		myNode = myNode->myNext;
//	}
//}
//
// void List::readFrom( const string& fileName ) {
// 	Node* myNode = myFirst;
// 	ifstream fin( fileName.c_str() );
// 		assert( fin.is_open() );
// 		while ( !(fin.eof()) ) {
// 			fin >> myNode->myItem;
// 			myNode = myNode->myNext;
// 		}
// 		fin.close();
// }
//
//int List::getIndexOf( const Item& it ) {
//	Node* myNode = myFirst;
//	int index = 0;
//	if ( mySize > 0 ) {
//		while ( it != myNode->myItem ) {
//			if ( myNode == nullptr ) {
//				throw range_error( "Cannot get index for empty list.");
//			} else {
//				myNode = myNode->myNext;
//				index++;
//			}
//		}
//		return index;
//	} else {
//		return -1;
//	}
//}
//
//int List::remove( unsigned index ) {
//	Node* myNode = myFirst;
//	for ( unsigned i = 0; i < index; i++ ) {
//		if ( i == index ) {
//			delete myNode;
//			myNode = nullptr;
//		} else {
//			myNode = myNode->myNext;
//		}
//	}
//	return myNode->myItem;
//}
//







/* tester.cpp
 * Joel Adams, for CS 112 at Calvin University.
 */
 
#include "ListTester.h"

int main() {
	ListTester lt;
	lt.runTests();
}






0
1
2
3
0
1
2
3
3
1
2
3
]0;mjs96@gold15: ~/cs112/project05[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05[00m$ [Kcd Debug/
]0;mjs96@gold15: ~/cs112/project05/Debug[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05/Debug[00m$ ls
List.d  ListTester.d  makefile    [0m[01;32mproject05[0m   subdir.mk  tester.o
List.o  ListTester.o  objects.mk  sources.mk  tester.d
]0;mjs96@gold15: ~/cs112/project05/Debug[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05/Debug[00m$ make all
make: Nothing to be done for 'all'.
]0;mjs96@gold15: ~/cs112/project05/Debug[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05/Debug[00m$ cd ..
]0;mjs96@gold15: ~/cs112/project05[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05[00m$ ./Debug/project05 
Running List tests...
Testing List default constructor... Passed!
Testing Node default constructor... Passed!
Testing Node explicit constructor...  1  2 Passed!
Testing append()...  0a  0b  1  2  3 Passed!
Testing destructor...  1  2 Passed!  But double-check for memory leaks!
Testing copy constructor...  1  2 Passed!
Testing assignment...  1  2  3  4  5  6  7 Passed!  But double-check for memory leaks!
Testing Equality...  0  1  2 Passed!
Testing readFrom(istream)...Passed!
Testing prepend()...  0  1 Passed!
Testing writeTo(string)...Passed! but check OutStream.txt for the values ...
Testing insertion()... 0  1  2  3 Passed!
Testing !=...  0  1  2  3 Passed!
Testing writeToStream...  0  1  2  3 Passed! 
Testing readFromString... Passed! 
Testing GetIndexOf...  1  2 Passed! 
Testing Remove...  0  1  2  3  4 Passed! 
All tests passed!
]0;mjs96@gold15: ~/cs112/project05[01;32mmjs96@gold15[00m:[01;34m~/cs112/project05[00m$ exit

Script done on 2019-10-14 23:00:30-0400
