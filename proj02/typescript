Script started on 2019-09-23 14:49:00-0400
]0;mjs96@maroon22: ~/cs112/project02[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02[00m$ ls
array.cpp      array.h          ArrayTester.h  main.cpp
arrayData.txt  ArrayTester.cpp  [0m[01;34mDebug[0m          typescript
]0;mjs96@maroon22: ~/cs112/project02[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02[00m$ cat main.cpp array.cpp array.h ArrayTester.cpp  ArrayTester.h arrayData.txt [K[A]0;mjs96@maroon22: ~/cs112/project02[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02[00m$ cat main.cpp array.cpp array.h ArrayTester.cpp ArrayTester.h arrayData.txt 
/* main.cpp drives the testing of the array operations.
 * Name:	Michael Sisko
 * Date:	09/18/2019
 * Begun by: Joel Adams, for CS 112 at Calvin University.
 */

#include "ArrayTester.h"

int main() {
	ArrayTester at;
	at.runTests();
}
/* array.cpp defines "C style" array operations
 * Name:	Michael Sisko
 * Date:	09/18/2019
 * Begun by: Joel Adams, for CS 112 at Calvin University.
 */

#include "array.h"
#include <fstream>

/*	This takes the value of the elements at their addresses
 *	the array, sums them together and returns the total.
 */
double sum(double *a, unsigned size) {
	double sum = 0.0;
	for (unsigned i = 0; i < size; i++, a++)
	{
		sum += *a;
	}
	return sum;
}

/*	This function reads the value from file and sets
 *	the original size of each array.
 */
void read(istream& in, double *a, unsigned size) {
	initialize(a, size);
	for (unsigned i = 0; i < size; i++, a++) {
		string getSize;
		double arraySize;
		getline(in, getSize);
		arraySize = atof( getSize.c_str() );
		*a = arraySize;
	}
}

/*	This function fills each array with the values from the file
 *	and stores them accordingly.
 */
void fill(const string& fileName, double *&a, unsigned &numValues) {
	delete [] a;
	ifstream fin( fileName.c_str() );
	assert( fin.is_open() );

	string getValues;
	getline(fin, getValues);
	numValues = atoi( getValues.c_str() );
	a = new double[numValues];

	read(fin, a, numValues);
	fin.close();
}

/*	This accepts an argument from the caller and resizes
 *	the array and passes the values from the old array
 *	into a temporary array, then a 'new' array is made and is
 *	passed the values from the temporary array until the
 *	breakout has been reached.
 */
void resize(double *&a, unsigned oldSize, unsigned newSize) {
	double *tempA = a;
	a = new double[newSize]();
	unsigned breakout = 0;
	newSize>oldSize? breakout=oldSize : breakout=newSize;
	for(unsigned i = 0; i < breakout; i++) {
		a[i] = tempA[i];
	}
	delete [] tempA;
}

/*	This function grabs the from array a1 and places it first
 *	in the new a3 array, and the following loop will pass array a2
 *	secondarily into the new array a3. After, both arrays a1 and a2
 *	are deleted to prevent memory leaking.
 *	This is a diagram with 'dummy' values to represent what occurs:
 *	BEFORE: 	a1 = { 1v1, 1v2, 1v3, 1v4 };		a2 = { 2v1, 2v2, 2v3 };
 *	AFTER:		a3 = { 1v1, 1v2, 1v3, 1v4, 2v1, 2v2, 2v3 };
 */
void concat(double *a1, unsigned size1, double *a2, unsigned size2, double *&a3, unsigned &size3) {
	size3 = size1 + size2;
	delete [] a3;
	a3 = new double[size3];
	for (unsigned i = 0; i < size3; i++ ) {
		i<size1? a3[i]=a1[i] : a3[i]=a2[i-size1];
	}
}

void initialize(double *a, unsigned size) {
	int val = 0;
	for (unsigned i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}

void print(double *a, unsigned size) {
	for (unsigned i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}		

/*	This function grabs the sum from the sum function
 *	and divides it by the  amount of elements in the array
 *	and returns the average.
 */
double average(double *a, unsigned size) {
	double sum = 0.0;
	for (unsigned i = 0; i < size; i++, a++)
	{
		sum += *a;
	}
	return sum/size;
}

/* array.h declares "C style" array operations.
 * Name:	Michael Sisko
 * Date:	09/18/2019
 * Begun by: Joel Adams, for CS 112 at Calvin University.
 */

#include <iostream>
#include <cassert>
using namespace std;

double sum(double *a, unsigned size);

void read(istream& in, double *a, unsigned size);

void fill(const string& fileName, double *&a, unsigned &numValues);

void resize(double *&a, unsigned oldSize, unsigned newSize);

void concat(double *a1, unsigned size1, double *a2, unsigned size2, double *&a3, unsigned &size3);

void initialize(double *a, unsigned size);

void print(double *a, unsigned size);

double average(double *a, unsigned size);
/* ArrayTester.cpp defines the methods to test C-style array operations.
 * Student: Michael Sisko
 * Date:	9/17/2019
 * By: Joel Adams, for CS 112 at Calvin University.
 */

#include "ArrayTester.h"
#include <fstream>
using namespace std;

ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
	cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testFill();
	testRead();
	cout << "All tests passed!" << endl;
}

void ArrayTester::setup() {
	a1 = new double[3];
	for (unsigned i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (unsigned i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (unsigned i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (unsigned i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (unsigned i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (unsigned i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
	cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
	cleanup();
	cout << "\nPassed!" << endl;
}

void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	assert( average(a2, 4) == 3.5 );
	assert( average(a3, 5) == 5 );
	cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	assert( sum(a2, 4) == 14 );
	assert( sum(a3, 5) == 25 );
	cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double * temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (unsigned i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (unsigned i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}

	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
	cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	unsigned size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
	/* the next assertion assumes that the new array's base
	 *  address is different from the old array's base address,
	 *  which may not be true. If concat() seems to be right,
	 *  and passes all assertions except this one, you may
	 *  comment out this assertion.
	 */
	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (unsigned i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	unsigned j = 2;
	for (unsigned i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
	cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}


void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;	
	setup();
	unsigned size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (unsigned i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
	cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[5];        // allocate anonymous array
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);           // skip past the '6' that's there for fill()...
	getline(fin, secondLine);          // skip past the '10' 
	read(fin, a4, 5);                  // read 5 values instead of 6 
	for (unsigned i = 0; i < 5; i++) { // check what we got:
		assert( a4[i] == i+11 );   //  values should be 11, 12, 13, 14, 15,
	}                                  //   so test-values differ from fill()
	delete [] a4;                      // deallocate anonymous array
	cout << "Passed!" << endl;
}

/*ArrayTester.h provides a class to test C-style array operations.
 * Name:	Michael Sisko
 * Date:	09/18/2019
 * By: Joel Adams, for CS 112 at Calvin University.
 */
#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

class ArrayTester
{
public:
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
6
10
11
12
13
14
15
]0;mjs96@maroon22: ~/cs112/project02[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02[00m$ [Kcd Debug/
]0;mjs96@maroon22: ~/cs112/project02/Debug[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02/Debug[00m$ ls
array.d  array.o  ArrayTester.d  ArrayTester.o  main.d  main.o  makefile  objects.mk  [0m[01;32mproject02[0m  sources.mk  subdir.mk
]0;mjs96@maroon22: ~/cs112/project02/Debug[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02/Debug[00m$ make  all
make: Nothing to be done for 'all'.
]0;mjs96@maroon22: ~/cs112/project02/Debug[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02/Debug[00m$ cd ..
]0;mjs96@maroon22: ~/cs112/project02[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02[00m$ ./Debug/project02 
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!
Testing average()... Passed!
Testing sum()... Passed!
Testing resize()... Passed!  But double-check that you deleted the old array...
Testing concat()... Passed!  But double-check that you deleted the old array...
Testing fill()... Passed!  But double-check that you deleted the old array...
Testing read()... Passed!
All tests passed!
]0;mjs96@maroon22: ~/cs112/project02[01;32mmjs96@maroon22[00m:[01;34m~/cs112/project02[00m$ exit

Script done on 2019-09-23 14:53:41-0400
